function [c,t] = poly_coeffs(fcn,var_str)
%UNTITLED2 此处显示有关此函数的摘要
%   %----------------------------------------------------------------------------------------------------------
% 输入： 
%      fcn          为待确定系数值多项式的符号表达式
%
%      var_str    为多项式的主变量相应的字符表示，如主变量为x时，var_str='x'，
%                    如果是单变量可省略之。注意第二个输入变量与以前版本不同。
%                    变量用相应的字符表示，对提高代码抗干扰能力有好处。
%----------------------------------------------------------------------------------------------------------
% 输出：
%      c        为多项式系数向量.
%               输出变量为两个时即[c,t]，c向量分量从左到右所对应的变量幂为升幂。
%               输出变量只有c或没有时, c向量分量从左到右所对应的变量幂为降幂。
%
%      t        t.pwr  是与系数相对应的变量之幂构成的向量;   t.var=var  
%               原先的变量向量=(t.var).^t.pwr ；如此既保留信息又提高效率。
%---------------------------------------------------------------------------------------------------------------
if nargin==1
    var=symvar(fcn);
    if length(var)>1
       error('Specify var please.');
    end
else
    var=sym(var_str);
end
if isempty(var)
    c0=fcn;
    t0=sym(1);
    disp('Note that: var=[]');
else
    [c0,t0]=coeffs(fcn,var);
end
if (length(t0)==1)&&(t0==1)
    c=c0;
    t.pwr=0;
    t.var=var;
else
    %-------------------------------------------------------------------------------------------------------------
    % 1.下面通过字符串运算直接取出t0的幂pwr。 如此，代码执行效率高，
    %   且不论多项式阶数有多高都不会产生运算溢出。
    %                
    % 2.前面的版本使用pwr=log2(subs(t0,2))， 缺点是运行速度较慢，
    %   且当多项式阶数较高时有可能溢出。
    %
    % 3.当然，也可以使用求导方法，即 pwr=subs(diff(t0,var),1)，
    %   但效率不高。与2中所提方法相当。   
    %
    %                                        
    %   通过测试发现：此处采用的字符串运算的方法可提高一倍以上的效率。
    %   主要原因是，matlab的strrep函数及eval函数效率非常高。
    p_str=strrep(char(t0),'matrix([','');    
    p_str=strrep(p_str,']])',']');          
    p_str=strrep(p_str,'1]','0]');          
    if nargin>=2
         p_str=strrep(p_str,[var_str,'^'],'');  
         p_str=strrep(p_str,var_str,'1'); 
    else        
         p_str=strrep(p_str,[char(var),'^'],'');  
         p_str=strrep(p_str,char(var),'1');   
    end  
    pwr=eval(p_str);         
    %-----------------------------------------------------------------------------------------------------------
     
    m=pwr(1);                              
    c=sym(zeros(1,m+1));                   
    if nargout==2   
        c(m+1-pwr)=c0;
        t.pwr=m:-1:0;
        t.var=var;
    else
        c(pwr+1)=c0;
    end

end

